------------------
-- === TODO === --
------------------

LEGEND:
[ ] - to be done
[x] - done
[-] - postponed
[.] - in progress


[ ] 1. Check how Criterion measures time - we need to embed it into PassRunner, so we can get detailed performance info
[ ] 2. Measure memory usage (max/min/avg) when running passes - we need @mwu help here
[ ] 3. IR
    [ ] 1. Layer offset preparation by Pass Manager (hard-coded now)
    [.] 2. Layer initialization
    [.] 3. Finding a way to compile-time track where are the memory pointers
    [ ] 4. "Events"
    [ ] 5. Proper type level Format resolution (Draft >> ...)
    [ ] 6. Moving to @mwu memory manager implementation
    [ ] 7. Moving all IR definitions to new API
    [ ] 8. Moving all IR utils to new API
[ ] 4. SubIRs (blocked by 3.3)
    [ ] 1. Gathering IR ptrs and moving them to constant memory block
    [ ] 2. Copying constant blocks back to the graph
    [ ] 2. File serialization / deserialization
[ ] 5. IR groups
[ ] 6. Pass
    [ ] 1. Type-level definition of pass structure (in/out info etc)
    [ ] 2. Pass constraints (Req and friends)
    [ ] 3. Pass attributes support
    [ ] 4. Pass manager implementation (running passes predefined order)
    [ ] 5. Designing pass types allowing for threaded pass execution
    [-] 6. Designing automatic pass sheduling and dependency resolution
[ ] 7. Connecting logger (either using existing or re-writing it for the best performance) (~ 2 days)
[ ] 8. Setting benchmarks structure
    [ ] 1. command line evaluation of chosen benchmarks, designing folder / file structure
    [ ] 2. Connecting Cpp benchmarks to Criterion
[ ] 9. Connecting EKG to the compiler
[ ] 10. Setting HLint to keep code concise and in the same style
