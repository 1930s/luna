import Std.Base


native class AWSEnv:
    def shortRep: "AWSEnv {}"


class LambdaFunction:
    LambdaFunction
    LambdaFunctionCode Text Text
    LambdaFunctionFile Text Text

    def fromText name code: LambdaFunctionCode name code
    def fromFile name path: LambdaFunctionFile name path

    def name: case self of
        LambdaFunctionCode n _: n
        LambdaFunctionFile n _: n

    def code: case self of
        LambdaFunctionCode _ c: c
        LambdaFunctionFile _ p: readFile p

    def toZippedBinary:
        primZipFunctionCode self.name self.code


class LambdaInvokeResponse:
    statusCode :: Int
    payload    :: Maybe Binary

    def shortRep:
        "LambdaInvokeResponse[" + self.statusCode.toText + "]"

    def toText:
        self.shortRep + ": " + self.payload.toText

    def json: self.payload.toJSON

    def text: self.payload.map (_.toText) . withDefault ""


class AWS:
    AWS
    AWSVal AWSEnv

    def init:
        e = primAWSNewEnv
        AWSVal e

    def env: case self of
        AWSVal e: e

    def listFunctions:
        primAWSListFuns self.env

    def invoke fName payload:
        primAWSInvoke self.env fName payload.toBinary

    def createFunction function:
        print "TODO"

