import Std.Base


native class AWSEnv:
    def shortRep: "AWSEnv {}"


class LambdaFunctionCode:
    LambdaFunctionCode
    LambdaFunctionCodeText Text Text
    LambdaFunctionCodeFile Text Text

    def fromText name code: LambdaFunctionCodeText name code
    def fromFile name path: LambdaFunctionCodeFile name path

    def name: case self of
        LambdaFunctionCodeText n _: n
        LambdaFunctionCodeFile n _: n

    def code: case self of
        LambdaFunctionCodeText _ c: c
        LambdaFunctionCodeFile _ p: readFile p

    def toZippedBinary:
        primZipFunctionCode self.name self.code


class LambdaFunction:
    name :: Text
    env  :: AWSEnv

    def invoke payload:
        primAWSInvoke self.env self.name payload.toBinary

    def shortRep: "LambdaFunction { name = " + self.name + " }"

    def toText: self.shortRep


class LambdaInvokeResponse:
    statusCode :: Int
    payload    :: Maybe Binary

    def shortRep:
        "LambdaInvokeResponse[" + self.statusCode.toText + "]"

    def toText:
        self.shortRep + ": " + self.payload.toText

    def json: self.payload.toJSON

    def text: self.payload.map (_.toText) . withDefault ""


class AWS:
    AWS
    AWSVal AWSEnv (Maybe Text)

    def init:
        e = primAWSNewEnv
        AWSVal e Nothing

    def setRole r: case self of
        AWSVal env _: AWSVal env (Just r)

    def role: case self of
        AWSVal _ r: r

    def env: case self of
        AWSVal e: e

    def listFunctions:
        primAWSListFuns self.env

    def createFunction function:
        case self.role of
            Nothing: errorStr "Please set an IAM role."
            Just r:
                code = function.toZippedBinary
                primAWSCreateFunction self.env function.name r code

